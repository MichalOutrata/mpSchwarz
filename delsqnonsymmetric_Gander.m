% N=10; h=1/(N+1);
% G=numgrid('S',N+2);
% 
% % %%% non-symmetric AdvDiff
% % eta=inline('x.^2.*cos(x+y).^2','x','y'); a=inline('(x+y).^2.*exp(x-y)','x','y');
% % b1=inline('(y-0.5)','x','y'); b2=inline('-(x-0.5)','x','y');
% % A=delsqnonsymmetric_Gander_test(eta,a,b1,b2,G);
% 
% %%% negative Laplacian
% eta = @(x,y) zeros(size(x)); a = @(x,y) ones(size(x));
% b1 = @(x,y) zeros(size(x)); b2 = b1;
% A = delsqnonsymmetric_Gander_test(eta,a,b1,b2,G);
% A_check = (-1)*Laplacian(2,N+2); err = A - A_check; disp( norm(err,'fro') );


function D = delsqnonsymmetric_Gander(eta,a,b1,b2,G)
% DELSQNONSYMMETRIC finite difference advection reaction diffusion
%   delsqvariable(eta,a,b1,b2,G) is the sparse form of the two-dimensional,
%   5-point discrete operator (eta-div(a*grad)+b.grad) on the grid G.
%   The grid G can be generated by NUMGRID or NESTED.
%   C. Moler, 7-16-91, adapted for our purposes by Gander and
%   Szyld, 13.05.2008

[m,n] = size(G);
h=1/(n-1);
[X,Y]=meshgrid(0:h:1,0:h:(m-1)*h);
E=feval(eta,X,Y);
Axm=feval(a,X-h/2,Y);
Axp=feval(a,X+h/2,Y);
Aym=feval(a,X,Y-h/2);
Ayp=feval(a,X,Y+h/2);
B1=feval(b1,X,Y);
B2=feval(b2,X,Y);
%quiver(X,Y,B1,B2)

% Indices of interior points

p = find(G);

% Connect interior points to themselves with 4's.
i = G(p);
j = G(p);
s = (E(p)*h^2+Axm(p)+Axp(p)+Aym(p)+Ayp(p));

% for k = north, east, south, west
k=-1;
% Possible neighbors in k-th direction
Q = G(p+k);
% Index of points with interior neighbors
q = find(Q);
% Connect interior points to neighbors
i = [i; G(p(q))];
j = [j; Q(q)];
s = [s; -Aym(p(q))-h/2*B2(p(q))];
k=1;
Q = G(p+k);
q = find(Q);
i = [i; G(p(q))];
j = [j; Q(q)];
s = [s; -Ayp(p(q))+h/2*B2(p(q))];
k=m;
Q = G(p+k);
q = find(Q);
i = [i; G(p(q))];
j = [j; Q(q)];
s = [s; -Axp(p(q))+h/2*B1(p(q))];
k=-m;
Q = G(p+k);
q = find(Q);
i = [i; G(p(q))];
j = [j; Q(q)];
s = [s; -Axm(p(q))-h/2*B1(p(q))];

D = sparse(i,j,s)/h^2;
end
